# Example onedef file format: no annotations (and less detail/extra info)

alias TodoListItem is String
alias TodoList is List of TodoListItem

type User: # forward-declaration for use in Client linkage
    pass

instance clients is List of Client
type Client: # represents web browser session
    fields:
        user is Linkage of User

server side:
    import generate_password_hash from utils/security.py

type User: # represents user of to-do list system
    fields:
        list is TodoList with editors owner
        password_hash is String
        name is String with editors owner
        clients is MultiLinkage of Client:
            default
    roles:
        owner:
            ensure self.clients.contains (client)
    actions:
        construct:
            self.name = payload.name
            self.password_hash = generate_password_hash (payload.password)
            self.clients.add (client)
        static login:
            self = users.find (user.name.lower () is payload.name.lower ())
            ensure self.password_hash is generate_password_hash (payload.password)
            self.clients.add (client)
        logout:
            self.clients.remove (client)
        destruct:
            ensure owner
instance users is List of User

view Login:
    form for User login:
        visibility default
        heading:
            text "Login"
        text input with name name:
            placeholder "Username"
        password input with name password:
            placeholder "Password"
        submission button
        post_submit:
            load view TodoList
        error block:
            paragraph:
                text error
    form for User construct:
        visibility default
        duplicate User login
        modify heading:
            text "Register"

view TodoList:
    foreach todo_list_item in client.user.list:
        form for edit todo_list_item:
            visibility default
            html_node input with name _:
                attribute value todo_list_item
                bind event focusout submit
        form for delete todo_list_item:
            visibility default
            html_node button with role submission:
                inner_text "X"
        html_node br
    form for client.user.list.construct_in_place:
        visibility default
        html_node input with name _:
            attribute placeholder "New"
            bind event focusout submit
    html_node br
    form for client.user.logout:
        visibility default
        html_node button with role submission:
            inner_text "Logout"
        post_submit:
            load view Login

define handler for startup:
    if client.user.is_attached:
        load view TodoList
    else:
        load view Login
